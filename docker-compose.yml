version: '3.9'

services:
  frontend:
    container_name: teas_frontend_prd
    image: teas_frontend_prd:1.0.0
    build:
      context: ./frontend
      dockerfile: ./Dockerfile
      args:
        - MODE=production
    command: [nginx, '-g', 'daemon off;']
    environment:
      - NGINX_HOST=teas.hku.hk
      - NGINX_PORT=80
    ports:
      - "40105:80"
    networks:
      - default
    volumes:
      - ./frontend/nginx:/etc/nginx/templates
    restart: unless-stopped
    depends_on:
      - backend
      
  backend:
    container_name: teas_backend_prd
    image: teas_backend_prd:1.0.0
    build:
      context: ./backend
      target: production
      dockerfile: ./Dockerfile
    command: npm run start:prod
    env_file: .env
    ports:
      - '40104:3000'
    networks:
      - default
    volumes:
      - ./backend/src:/usr/src/app/src
      - ./backend/uploads:/usr/src/app/uploads
      - /usr/src/app/node_modules
    tmpfs:
      - /tmp
    ulimits:
      nproc: 65535
      nofile:
        soft: 30000
        hard: 60000
    restart: unless-stopped
    healthcheck:
      test: /usr/src/app/cron.sh || exit 1
      interval: 60m
      timeout: 10s
      retries: 3
    depends_on:
      - cache

  cache:
    container_name: teas_redis_prd
    image: redis
    command: > 
      --requirepass ${REDIS_PASSWORD}
    env_file: .env
    volumes:
      - redis-data:/data
    networks:
      - default
    restart: unless-stopped

networks:
  default:

volumes:
  redis-data:


services:
  db:
    image: postgres:latest
    environment:
      POSTGRES_USER: pspdfkit
      POSTGRES_PASSWORD: password
      # ... other environment variables
  pspdfkit:
    image: "pspdfkit/pspdfkit:latest"

    environment:
      PGUSER: pspdfkit
      PGPASSWORD: password
      # ... other environment variables
    depends_on:
      - db
    expose:
      - "5000"
  nginx:
    image: nginx:latest
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - pspdfkit
    ports:
      - "4000:4000"



x-base_service: &base_service
    ports:
      - "${WEBUI_PORT:-7860}:7860"
    volumes:
      - &v1 ./data:/data
      - &v2 ./output:/output
    stop_signal: SIGKILL
    tty: true
    deploy:
      resources:
        reservations:
          devices:
              - driver: nvidia
                device_ids: ['0']
                capabilities: [compute, utility]

name: webui-docker

services:
  download:
    build: ./services/download/
    profiles: ["download"]
    volumes:
      - *v1

  auto: &automatic
    <<: *base_service
    profiles: ["auto"]
    build: ./services/AUTOMATIC1111
    image: sd-auto:63
    environment:
      - CLI_ARGS=--allow-code --medvram --xformers --enable-insecure-extension-access --api

  auto-cpu:
    <<: *automatic
    profiles: ["auto-cpu"]
    deploy: {}
    environment:
      - CLI_ARGS=--no-half --precision full --allow-code --enable-insecure-extension-access --api

  invoke: &invoke
    <<: *base_service
    profiles: ["invoke"]
    build: ./services/invoke/
    image: sd-invoke:30
    environment:
      - PRELOAD=true
      - CLI_ARGS=--xformers

  # invoke-cpu:
  #   <<: *invoke
  #   profiles: ["invoke-cpu"]
  #   environment:
  #     - PRELOAD=true
  #     - CLI_ARGS=--always_use_cpu

  comfy: &comfy
    <<: *base_service
    profiles: ["comfy"]
    build: ./services/comfy/
    image: sd-comfy:4
    environment:
      - CLI_ARGS=


  comfy-cpu:
    <<: *comfy
    profiles: ["comfy-cpu"]
    deploy: {}
    environment:
      - CLI_ARGS=--cpu